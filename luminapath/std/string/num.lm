use std:string [<:>, <+>]

impl ToString for i64
  fn show n =
    let str = show ((std:math:i64:abs n) as u64) in
      if n < 0
        then 45 <:> str
        else str
    

impl ToString for i32
  fn show n = ToString:show (n as i64)

impl ToString for i16
  fn show n = ToString:show (n as i64)

impl ToString for i8
  fn show n = show (n as i64)

// TODO: This would be much more efficient if we manually used `Vec`.
// However; I think a better way to approach this is a more general MIR/LIR optimisation
// which detects and transforms this kind of code? Should be possible. 
//
// Since `string` has the same layout as `List` perhaps we could do it transparently post-monomorphisation?
impl ToString for u64
  fn show n =
    if n == 0
      then "0"
      else showNext n
    

   where
    fn showNext n as u64 -> string =
      match n
      | 0 -> ""
      | _ ->
        let c = ((n % 10) as u8) + 48
         in showNext (n / 10) <+> c
        

impl ToString for u32
  fn show n = ToString:show (n as u64)

impl ToString for u16
  fn show n = ToString:show (n as u64)

impl ToString for u8
  fn show n = show (n as u64)
