pub use non_zero [NonZero]
use std:string [<+>]
use std:io [crash]

when n can Num + Negate + Compare
pub fn abs n as n -> n =
  if n < Num:zero
    then Negate:neg n
    else n

pub trait Num
  @[precedence 4500]
  fn ** as self self -> self
  @[precedence 5000]
  fn + as self self -> self
  @[precedence 5000]
  fn - as self self -> self
  @[precedence 5500]
  fn * as self self -> self
  @[precedence 5500]
  fn / as self self -> self
  @[precedence 5500]
  fn % as self self -> self

  fn zero as self
  fn one as self

  fn succ n as self -> self = n + Num:one
  fn pred n as self -> self = n - Num:one

pub trait Negate
  fn neg as self -> self

type Ordering = Less | Equal | Greater

impl ToString for Ordering
  fn show ord as self -> string =
    match ord
    | Less -> "Less"
    | Greater -> "Greater"
    | Equal -> "Equal"

pub trait Compare
  fn compare as self self -> Ordering

  @[precedence 4000]
  fn == lhs rhs as self self -> bool =
    match compare lhs rhs
    | Equal -> true
    | _ -> false

  @[precedence 4000]
  fn < lhs rhs as self self -> bool =
    match compare lhs rhs
    | Less -> true
    | _ -> false

  @[precedence 4000]
  fn > lhs rhs as self self -> bool =
    match compare lhs rhs
    | Greater -> true
    | _ -> false

  @[precedence 4000]
  fn >= lhs rhs as self self -> bool =
    match compare lhs rhs
    | Equal -> true
    | Greater -> true
    | Less -> false

  @[precedence 4000]
  fn <= lhs rhs as self self -> bool =
    match compare lhs rhs
    | Equal -> true
    | Less -> true
    | Greater -> false

  @[precedence 4000]
  fn /= x y as self self -> bool =
    not (x == y)

  fn max x y as self self -> self =
    if y > x
      then y
      else x

  fn min x y as self self -> self =
    if y < x
      then y
      else x

when a can ToString
fn or_overflow_error char lhs rhs (n, overflown) as u8 a a (a, bool) -> a =
  if overflown
    then crash ("integer overflow " <> lhs <> " " <+> char <> " " <> show rhs)
    else n

when a can ToString
fn or_underflow_error char lhs rhs (n, underflown) as u8 a a (a, bool) -> a =
  if underflown
    then crash ("integer underflow " <> lhs <> " " <+> char <> " " <> rhs)
    else n

impl Num for u8
  fn ** a b as self self -> self =
    if b == 0
      then a
      else (a * a) ** (b - 1)
  fn + a b as self self -> self = builtin:plus_checked a b . or_overflow_error 43 a b
  fn - a b as self self -> self = builtin:minus_checked a b . or_underflow_error 45 a b
  fn * a b as self self -> self = builtin:mul_checked a b . or_overflow_error 42 a b
  fn / a b as self self -> self = builtin:div a b
  fn % a b as self self -> self = a - (a / b * b)
  fn zero = 0
  fn one = 1

impl Compare for u8
  fn compare a b as self self -> Ordering =
    if builtin:eq a b then
      Equal
    else if builtin:lt a b then
      Less
    else
      Greater

impl Num for u16
  fn ** a b as self self -> self =
    if b == 0
      then a
      else (a * a) ** (b - 1)
  fn + a b as self self -> self = builtin:plus_checked a b . or_overflow_error 43 a b
  fn - a b as self self -> self = builtin:minus_checked a b . or_underflow_error 45 a b
  fn * a b as self self -> self = builtin:mul_checked a b . or_overflow_error 42 a b
  fn / a b as self self -> self = builtin:div a b
  fn % a b as self self -> self = a - (a / b * b)
  fn zero = 0
  fn one = 1

impl Compare for u16
  fn compare a b as self self -> Ordering =
    if builtin:eq a b then
      Equal
    else if builtin:lt a b then
      Less
    else
      Greater

impl Num for u32
  fn ** a b as self self -> self =
    if b == 0
      then a
      else (a * a) ** (b - 1)
  fn + a b as self self -> self = builtin:plus_checked a b . or_overflow_error 43 a b
  fn - a b as self self -> self = builtin:minus_checked a b . or_underflow_error 45 a b
  fn * a b as self self -> self = builtin:mul_checked a b . or_overflow_error 42 a b
  fn / a b as self self -> self = builtin:div a b
  fn % a b as self self -> self = a - (a / b * b)
  fn zero = 0
  fn one = 1

impl Compare for u32
  fn compare a b as self self -> Ordering =
    if builtin:eq a b then
      Equal
    else if builtin:lt a b then
      Less
    else
      Greater

impl Num for u64
  fn ** a b as self self -> self =
    if b == 0
      then a
      else (a * a) ** (b - 1)
  fn + a b as self self -> self = builtin:plus_checked a b . or_overflow_error 43 a b
  fn - a b as self self -> self = builtin:minus_checked a b . or_underflow_error 45 a b
  fn * a b as self self -> self = builtin:mul_checked a b . or_overflow_error 42 a b
  fn / a b as self self -> self = builtin:div a b
  fn % a b as self self -> self = a - (a / b * b)
  fn zero = 0
  fn one = 1

impl Compare for u64
  fn compare a b as self self -> Ordering =
    if builtin:eq a b then
      Equal
    else if builtin:lt a b then
      Less
    else
      Greater

impl Num for i8
  fn ** a b as self self -> self =
    if b == 0
      then a
      else (a * a) ** (b - 1)
  fn + a b as self self -> self = builtin:plus_checked a b . or_overflow_error 43 a b
  fn - a b as self self -> self = builtin:minus_checked a b . or_underflow_error 45 a b
  fn * a b as self self -> self = builtin:mul_checked a b . or_overflow_error 42 a b
  fn / a b as self self -> self = builtin:div a b
  fn % a b as self self -> self = a - (a / b * b)
  fn zero = 0
  fn one = 1

impl Compare for i8
  fn compare a b as self self -> Ordering =
    if builtin:eq a b then
      Equal
    else if builtin:lt a b then
      Less
    else
      Greater

impl Num for i16
  fn ** a b as self self -> self =
    if b == 0
      then a
      else (a * a) ** (b - 1)
  fn + a b as self self -> self = builtin:plus_checked a b . or_overflow_error 43 a b
  fn - a b as self self -> self = builtin:minus_checked a b . or_underflow_error 45 a b
  fn * a b as self self -> self = builtin:mul_checked a b . or_overflow_error 42 a b
  fn / a b as self self -> self = builtin:div a b
  fn % a b as self self -> self = a - (a / b * b)
  fn zero = 0
  fn one = 1

impl Compare for i16
  fn compare a b as self self -> Ordering =
    if builtin:eq a b then
      Equal
    else if builtin:lt a b then
      Less
    else
      Greater

impl Num for i32
  fn ** a b as self self -> self =
    if b == 0
      then a
      else (a * a) ** (b - 1)
  fn + a b as self self -> self = builtin:plus_checked a b . or_overflow_error 43 a b
  fn - a b as self self -> self = builtin:minus_checked a b . or_underflow_error 45 a b
  fn * a b as self self -> self = builtin:mul_checked a b . or_overflow_error 42 a b
  fn / a b as self self -> self = builtin:div a b
  fn % a b as self self -> self = a - (a / b * b)
  fn zero = 0
  fn one = 1

impl Compare for i32
  fn compare a b as self self -> Ordering =
    if builtin:eq a b then
      Equal
    else if builtin:lt a b then
      Less
    else
      Greater

impl Num for i64
  fn ** a b as self self -> self =
    if b == 0
      then a
      else (a * a) ** (b - 1)
  fn + a b as self self -> self = builtin:plus_checked a b . or_overflow_error 43 a b
  fn - a b as self self -> self = builtin:minus_checked a b . or_underflow_error 45 a b
  fn * a b as self self -> self = builtin:mul_checked a b . or_overflow_error 42 a b
  fn / a b as self self -> self = builtin:div a b
  fn % a b as self self -> self = a - (a / b * b)
  fn zero = 0
  fn one = 1

impl Compare for i64
  fn compare a b as self self -> Ordering =
    if builtin:eq a b then
      Equal
    else if builtin:lt a b then
      Less
    else
      Greater
