use std:gc
pub use std:math [Num [..], Compare [..], Ordering]
pub use std:math:u8
pub use std:math:u16
pub use std:math:u32
pub use std:math:u64
pub use std:math:i8
pub use std:math:i16
pub use std:math:i32
pub use std:math:i64
pub use std:maybe [Maybe [..]]
pub use std:result [Result [..]]
pub use std:string [string, ToString [show], <>]
pub use std:list [Listable [:], List, ++]
use std:string [Stringable]
pub use std:nothing [nothing]
use std:ptr
use std:list:vec [Vec]
use std:env [process_arguments]
use std:array
use std:unwind
pub use std:tyinfo [Type]
// we need these so that their implementations are always included
use std:tuple
use std:bool

@![langItem(list as List)]

trait Closure p r
  fn call as self p -> r

@[platform ["linux-gnu", "linux-musl"]]
fn alloc size as int -> *u8 = std:gc:alloc size

@[platform ["linux-gnu", "linux-musl"]]
fn dealloc ptr size as *u8 int -> () = std:gc:free ptr

@[extern "x86_64_syscall", platform "linux"]
fn syscall as int int int int int int -> ()

@[no_mangle, platform ["linux-gnu", "linux-musl"]]
fn _lumina_sys_init argc argv as i32 **u8 -> () =
  setup_args argc argv

fn setup_args argc argv as i32 **u8 -> () =
  let args = vec:from_range (0, argc as uint) #(\i -> vec:bytes_from_null_terminated (ptr:offsetu argv (i * 8) . ptr:deref))
   in ptr:write (builtin:val_to_ref process_arguments) args

pub fn not b as bool -> bool =
  if b
    then false
    else true

