use
  std:list:vec [unsafe_take, from_range]

pub type Slice a {
  // For pointer marking to work in the GC we need to hold on to the root
  source *a
  
  ptr *a
  len uint
}

// zero-cost conversion from slice to vector
// must never outlive the slice
fn weak_vec { ptr, len } as (Slice a) -> Vec a =
  { Vec a | ptr, len }

pub fn split slice as (Slice a) -> Maybe (a, (Slice a)) =
  get 0 slice
  . map #(\v -> (v, skip 1 slice))

pub fn is_empty { len } as (Slice a) -> bool = len == 0

pub fn empty as (Slice a) =
  {
    source =
      0 as *a, ptr = 0 as *a, len = 0
  }

pub fn get i slice as uint (Slice a) -> Maybe a =
  weak_vec slice . get i

pub fn unsafe_get i slice as uint (Slice a) -> a =
  weak_vec slice . unsafe_get i

// TODO: we should make it so that dot-calls prioritise type-specific *over* defined in current module
// for the sake of overloading. Local bindings should still be prioritised though?
pub fn len { len } as (Slice a) -> uint = len

pub fn forEach f slice as (fn a -> ()) (Slice a) -> () =
  list:itimes #visit slice.len
  where
    fn visit i as uint -> () = weak_vec slice . unsafe_get i . f

pub fn map f slice as (fn a -> b) (Slice a) -> Slice b =
  from_range
    (0, slice.len)
    #(\i -> unsafe_get i slice . f)
  . to_slice

// Splits the slice at the given index.
pub fn split_at at slice as uint (Slice a) -> ((Slice a), (Slice a)) =
  (take at slice, skip (at) slice)

pub fn take n slice as uint (Slice a) -> (Slice a) =
  { slice ~ len @ len = min n len }

pub fn skip n slice as uint (Slice a) -> (Slice a) =
  if n >= slice.len then
    empty
  else
    {
      slice
      ~ ptr =
        ptr:offsetu slice.ptr (n * Type(a) :: size)
      , len = slice.len - n
    }

pub fn any f slice as (fn a -> bool) (Slice a) -> bool =
  next 0
  where
    fn next i as uint -> bool =
      match get i slice
      | Nothing -> false
      | Just elem ->
        if f elem
          then true
          else next (i + 1)

pub fn all f slice as (fn a -> bool) (Slice a) -> bool =
  not (any #(\v -> not (f v)) slice)

pub fn to_list slice as (Slice a) -> List a =
  if len slice == 0
    then List:Nil
    else List:Slice slice

// TODO: do something more efficient

when a can ToString
impl ToString for (Slice a)
  fn show slice as self -> string =
    "[" <> show_ slice
    where
      fn show_ slice as (Slice a) -> string =
        match split slice
        | Nothing -> "]"
        | Just (x, xs) ->
          if xs.len == 0
            then show x <> "]"
            else show x <> ", " <> show_ xs
